/*
problem : 숫자의 길이가 n인 수 중 계단수의 개수를 구해라
input : 숫자의 길이 n
output : 길이가 n인 계단수의 개수

idea : bottom-up 방식으로 해결
1. n=1 일때, 계단수의 개수는 9
   -> 1, 2, 3, 4, 5, 6, 7, 8, 9
2. n=2 일때, 계단수의 개수는 17
   1) 끝자리가 0으로 끝나는 계단수의 개수 1개
      -> 1 + 0 = 10
      -> 'n=1 일때, 끝자리가 1로 끝나는 계산수의 개수'와 같다
   2) 끝자리가 1으로 끝나는 계단수의 개수 1개
      -> 0 + 1 = 01, 2 + 1 = 21(여기에서 01은 1과 같으므로 고려하지 않는다.)
      -> 'n=1 일때, 끝자리가 0로 끝나는 계산수의 개수 + n=1 일때, 끝자리가 2로 끝나는 계산수의 개수'와 같다
   3) 끝자리가 3으로 끝나는 계단수의 개수 2개
      -> 2 + 3 = 23, 4+ 3 = 43
      -> 'n=1 일때, 끝자리가 2로 끝나는 계산수의 개수 + n=1 일때, 끝자리가 4로 끝나는 계산수의 개수'와 같다
   4) 끝자리가 4으로 끝나는 계단수의 개수 2개
      -> 3 + 4 = 34, 5 + 4 = 54
      -> 'n=1 일때, 끝자리가 3로 끝나는 계산수의 개수 + n=1 일때, 끝자리가 5로 끝나는 계산수의 개수'와 같다
   ...
   9) 끝자리가 8으로 끝나는 계단수의 개수 2개
      -> 7 + 8 = 78, 9 + 8 = 98
      -> 'n=1 일때, 끝자리가 7로 끝나는 계산수의 개수 + n=1 일때, 끝자리가 9로 끝나는 계산수의 개수'와 같다
   10) 끝자리가 9으로 끝나는 계단수의 개수 1개
      -> 8 + 9 = 89
      -> 'n=1 일때, 끝자리가 8로 끝나는 계산수의 개수'와 같다
3. 이를 이용해 관계식 도출
   -> DP[i][k]를 '길이가 i일 때 끝자리가 k인 계단수의 개수'라고 한다
   -> DP[i][k] = DP[i-1][k-1] + DP[i-1][k+1] (1 <= k <= 8)
                 DP[i-1][1]                  (k = 0)
                 DP[i-1][8]                  (k = 9)
*/

#include <iostream>
using namespace std;

int main()
{
    // 숫자의 길이 n
    int length = 0;
    // 숫자의 길이가 n일 때 계단수의 개수
    // 결과값을 10^9으로 나눈 나머지를 요구하므로, long long 타입으로 선언한다.
    long long result = 0;
    // 길이가 i일 때 끝자리가 k인 계산수의 개수를 저장할 2차원 배열
    // 결과값을 10^9으로 나눈 나머지를 요구하므로, long long 타입으로 선언한다.
    // i의 범위 : 1 <= i <= 100
    long long DP[101][10];

    // 숫자의 길이가 1일 때, DP 초기화
    DP[1][0] = 0;
    for (int i = 1; i < 10; i++)
        DP[1][i] = 1;

    // 숫자의 길이 입력
    cin >> length;

    // 숫자의 길이 i가 2부터 시작해 n까지 관계식을 이용해 계산
    // 계산된 값은 항상 10^9으로 나눈 나머지를 저장
    for (int i = 2; i <= length; i++)
    {
        // 끝자리가 0인 경우
        DP[i][0] = DP[i - 1][1];

        // 끝자리가 9인 경우
        DP[i][9] = DP[i - 1][8];

        // 끝자리가 1부터 8인 경우
        for (int EndNumber = 1; EndNumber <= 8; EndNumber++)
            DP[i][EndNumber] = (DP[i - 1][EndNumber - 1] + DP[i - 1][EndNumber + 1]) % 1000000000;
    }

    // 끝자리가 0인 경우부터 시작해 9인 경우까지 모두 더한다.
    // 계산된 값은 항상 10^9으로 나눈 나머지를 저장
    for (int EndNumber = 0; EndNumber < 10; EndNumber++)
        result = (result + DP[length][EndNumber]) % 1000000000;

    // 결과값 출력
    cout << result;

    return 0;
}