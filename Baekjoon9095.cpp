/*
problem : 양수 n을 1,2,3의 합으로 나타내는 방법의 수
input : 양수 n (0 <= n < 11), 테스트할 횟수 T
output : 테스트마다 n을 1,2,3의 합으로 나타내는 방법의 수 k

idea : bottom-up 방식으로 해결
1. n=1일 때, k=1
   -> 1
2. n=2일 때, k=2
   -> 1+1, 2
3. n=3일 때, k=4
   1) (n=2)일 때, 오른쪽에 (+1)을 하는 방법
       -> 1+1+1, 2+1
   2) (n=1)일 때, 오른쪽에 (+2)을 하는 방법
       -> 1+2
   3) (n=3)일 때, 오른쪽에 (+3)을 하는 방법
       -> 3
4. n=4일 때, k=7
   1) (n=3)일 때, 오른쪽에 (+1)을 하는 방법
       -> 1+1+1+1, 2+1+1, 1+2+1, 3+1
   2) (n=2)일 때, 오른쪽에 (+2)을 하는 방법
       -> 1+1+2, 2+2
   3) (n=1)일 때, 오른쪽에 (+3)을 하는 방법
       -> 1+3
5. n=5일 때, k=13
   1) (n=4)일 때, 오른쪽에 (+1)을 하는 방법
       -> 1+1+1+1+1, 2+1+1+1, 1+2+1+1, 3+1+1, 1+1+2+1, 2+2, 1+3+1
   2) (n=3)일 때, 오른쪽에 (+2)을 하는 방법
       -> 1+1+1+2, 2+1+2, 1+2+2, 3+2
   3) (n=2)일 때, 오른쪽에 (+3)을 하는 방법
       -> 1+1+3, 2+3
6. 이를 이용해 DP의 관계식 도출
   -> DP[n] = DP[n-1] + DP[n-2] + DP[n-3]
*/

#include <iostream>
using namespace std;

int main()
{
    // 입력받을 n, 테스트 케이스 T
    int inputNumber = 0, T = 0;
    // 1,2,3의 합으로 나타낼 수 있는 방법을 저장한 배열, 입력값이 11을 넘지 않으므로 배열의 크기를 11로 지정한다.
    int DP[11];

    // n=1, n=2, n=3일 때 DP 저장
    DP[1] = 1;
    DP[2] = 2;
    DP[3] = 4;

    // 입력값이 얼마되지 않으므로, n을 입력받기 전 DP를 모두 계산
    for (int index = 4; index < 11; index++)
        DP[index] = DP[index - 1] + DP[index - 2] + DP[index - 3];

    // 테스트할 횟수 입력
    cin >> T;

    // 테스트 케이스마다 DP에 저장된 결과값 출력
    for (int i = 0; i < T; i++)
    {
        cin >> inputNumber;
        cout << DP[inputNumber] << '\n';
    }

    return 0;
}