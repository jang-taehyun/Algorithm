/*
problem : 2*n 직사각형을 1*2 타일, 2*1타일로 채우는 방법의 수
input : 2*n 직사각형
output : 방법의 수

idea
1. n=1 이면 방법의 수는 1
   -> '|'
2. n=2 이면 방법의 수는 2(1*2타일 2개 사용 + 2*1타일 2개 사용)
   -> =, ||
   -> 여기에서 ||은 2*1 타일을 2개 붙이는 방법과 같다.
3. n=3 일때는 2*1 타일에 '='타일을 오른쪽에 붙이는 방법과 2*2 타일에 '|'타일을 오른쪽에 붙이는 방법을 더한다.
   -> 왼쪽에 붙이는 방법는 오른쪽에 붙이는 방법과 같으므로 고려하지 않는다.
   -> '|=', '=|', '|||'
4. n=4 일때는 2*2 타일에 '='타일을 오른쪽에 붙이는 방법과 2*3 타일에 '|'타일을 오른쪽에 붙이는 방법을 더한다.
   -> '==', '||=', '|=|', '=||', '||||'
5. 피보나치 수열과 패턴이 동일하므로 DP를 이용해 관계식을 도출하여 해결
   -> DP[n] = DP[n-1] + DP[n-2]
*/
#include <iostream>
using namespace std;

int main()
{
    // 경우의 수를 저장할 배열, 입력값이 1001을 넘어가지 않으므로 배열의 크기를 1001로 지정한다.
    int DP[1001];
    // 입력받을 숫자
    int inputNumber = 0;
    cin >> inputNumber;

    // n=1인 경우와 n=2인 경우의 수 저장
    DP[1] = 1;
    DP[2] = 2;

    // n까지 경우의 수 계산, output으로 10007로 나눈 나머지를 요구하므로 계산된 경우의 수를 항상 10007로 나눈다.
    for (int idx = 3; idx <= inputNumber; idx++)
        DP[idx] = (DP[idx - 1] + DP[idx - 2]) % 10007;

    // 결과 출력
    cout << DP[inputNumber];

    return 0;
}