/*
problem : 2*n 직사각형을 1*2 타일, 2*1 타일, 2*2 타일로 채우는 방법의 수
input : 2*n 직사각형
output : 1*2 타일, 2*1 타일, 2*2 타일로 채우는 방법의 수

idea
1. n=1 일때, 채우는 방법의 수는 1
   -> '|'
2. n=2 일때, 채우는 방법의 수는 3
   -> '||', '=', 'ㅁ'
3. n=3 일때, 채우는 방법의 수를 구하는 방법
   1) n=2인 경우에서, 오른쪽에 '|' 타일을 붙이는 방법의 경우의 수 : 3
      -> '|||', '=|', 'ㅁ|'
   2) n=1인 경우에서, 오른쪽에 '=' 타일을 붙이는 방법의 경우의 수 : 1
      -> '|='
   3) n=1인 경우에서, 오른쪽에 'ㅁ'타일을 붙이는 방법의 경우의 수 : 1
      -> '|ㅁ'
   -> 이를 모두 더하면 5가지
4. n=4 일때, 채우는 방법의 수를 구하는 방법
   1) n=3인 경우에서, 오른쪽에 '|' 타일을 붙이는 방법의 경우의 수 : 5
      -> '||||', '=||', 'ㅁ||', '|=|', '|ㅁ|'
   2) n=2인 경우에서, 오른쪽에 '=' 타일을 붙이는 방법의 경우의 수 : 3
      -> '||=', '==', 'ㅁ='
   3) n=2인 경우에서, 오른쪽에 'ㅁ'타일을 붙이는 방법의 경우의 수 : 3
      -> '||ㅁ', '=ㅁ', 'ㅁㅁ'
   -> 이를 모두 더하면 11가지
5. DP를 이용해 관계식 도출
   -> DP[n] = DP[n-1] + 2*(DP[n-2])
*/

#include <iostream>
using namespace std;

int main()
{
    // 입력받을 가로의 길이
    int row = 0;
    // 계산된 값을 저장할 배열, 입력값이 1001을 넘기지 않으므로 배열의 길이를 1001로 설정
    int DP[1001];

    cin >> row;

    // n=1, n=2일때 방법의 수 저장
    DP[1] = 1;
    DP[2] = 3;

    // n=3부터 row까지 관계식을 이용해 방법의 수 계산 및 저장
    // 이때, 결과값으로 10007로 나눈 나머지를 요구하므로, 항상 10007를 나눈 나머지를 저장
    for (int n = 3; n <= row; n++)
        DP[n] = (DP[n - 1] + (2 * DP[n - 2])) % 10007;

    // 결과값 출력
    cout << DP[row];

    return 0;
}